$WW,1$$FG,0$xml version="1.0" encoding="utf-8"?> 
A browser with JavaScript enabled is required for this page to operate properly. 

Documentation
 



The Java&trade; Tutorials
 
$MA,"Hide TOC",LM="KCTest(\"javascript:toggleLeft()\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ 





$MA,"Working with URLs",LM="KCTest(\"index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 $MA,"What Is a URL?",LM="KCTest(\"definition.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 Creating a URL
 $MA,"Parsing a URL",LM="KCTest(\"urlInfo.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 $MA,"Reading Directly from a URL",LM="KCTest(\"readingURL.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 $MA,"Connecting to a URL",LM="KCTest(\"connecting.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 $MA,"Reading from and Writing to a URLConnection",LM="KCTest(\"readingWriting.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 

Trail: Custom Networking 
Lesson: Working with URLs 
$MA,"Home Page",LM="KCTest(\"../../index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ &gt; $MA,"Custom Networking",LM="KCTest(\"../index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ &gt; $MA,"Working with URLs",LM="KCTest(\"index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ 
$MA,"&laquo;&nbsp;Previous",LM="KCTest(\"definition.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$&nbsp;&bull;&nbsp;$MA,"Trail",LM="KCTest(\"../TOC.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$&nbsp;&bull;&nbsp;$MA,"Next&nbsp;&raquo;",LM="KCTest(\"urlInfo.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ 
The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available.
See $MA,"Java Language Changes",LM="KCTest(\"https://docs.oracle.com/pls/topic/lookup?ctx=en/java/javase&id=java_language_changes\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ for a summary of updated language features in Java SE 9 and subsequent releases.
See $MA,"JDK Release Notes",LM="KCTest(\"https://www.oracle.com/technetwork/java/javase/jdk-relnotes-index-2162236.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ for information about new features, enhancements, and removed or deprecated options for all JDK releases.

 $FG,5$$ID,2$Creating a URL$FG,0$$UL,0$$ID,-2$

 The easiest way to create a URL object is from a String that represents the human-readable form of the URL address. This is typically the form that another person will use for a URL. In your Java program, you can use a String containing this text to create a URL object:
 URL myURL = new URL("http://example.com/"); 

The URL object created above represents an absolute URL. An absolute URL contains all of the information necessary to reach the resource in question. You can also create URL objects from a relative URL address.
 $FG,5$$ID,2$Creating a URL Relative to Another$FG,0$$UL,0$$ID,-2$
 A relative URL contains only enough information to reach the resource relative to (or in the context of) another URL.
 Relative URL specifications are often used within HTML files. For example, suppose you write an HTML file called JoesHomePage.html. Within this page, are links to other pages, PicturesOfMe.html and MyKids.html, that are on the same machine and in the same directory as JoesHomePage.html. The links to PicturesOfMe.html and MyKids.html from JoesHomePage.html could be specified just as filenames, like this:
 &lt;a href="PicturesOfMe.html"&gt;Pictures of Me&lt;/a&gt; &lt;a href="MyKids.html"&gt;Pictures of My Kids&lt;/a&gt; 

These URL addresses are relative URLs. That is, the URLs are specified relative to the file in which they are contained &mdash; JoesHomePage.html.
 In your Java programs, you can create a URL object from a relative URL specification. For example, suppose you know two URLs at the site example.com:
 http://example.com/pages/page1.html http://example.com/pages/page2.html 

You can create URL objects for these pages relative to their common base URL: http://example.com/pages/ like this:
 URL myURL = new URL("http://example.com/pages/"); URL page1URL = new URL(myURL, "page1.html"); URL page2URL = new URL(myURL, "page2.html"); 

This code snippet uses the URL constructor that lets you create a URL object from another URL object (the base) and a relative URL specification. The general form of this constructor is:
 URL(URL baseURL, String relativeURL) 

The first argument is a URL object that specifies the base of the new URL. The second argument is a String that specifies the rest of the resource name relative to the base. If baseURL is null, then this constructor treats relativeURL like an absolute URL specification. Conversely, if relativeURL is an absolute URL specification, then the constructor ignores baseURL.
 This constructor is also useful for creating URL objects for named anchors (also called references) within a file. For example, suppose the page1.html file has a named anchor called BOTTOM at the bottom of the file. You can use the relative URL constructor to create a URL object for it like this:
 URL page1BottomURL = new URL(page1URL,"#BOTTOM"); 

$FG,5$$ID,2$Other URL Constructors$FG,0$$UL,0$$ID,-2$
 The URL class provides two additional constructors for creating a URL object. These constructors are useful when you are working with URLs, such as HTTP URLs, that have host name, filename, port number, and reference components in the resource name portion of the URL. These two constructors are useful when you do not have a String containing the complete URL specification, but you do know various components of the URL.
 For example, suppose you design a network browsing panel similar to a file browsing panel that allows users to choose the protocol, host name, port number, and filename. You can construct a URL from the panel&#39;s components. The first constructor creates a URL object from a protocol, host name, and filename. The following code snippet creates a URL to the page1.html file at the example.com site:
 new URL("http", "example.com", "/pages/page1.html"); 

This is equivalent to
 new URL("http://example.com/pages/page1.html"); 

The first argument is the protocol, the second is the host name, and the last is the pathname of the file. Note that the filename contains a forward slash at the beginning. This indicates that the filename is specified from the root of the host.
 The final URL constructor adds the port number to the list of arguments used in the previous constructor:
 URL gamelan = new URL("http", "example.com", 80, "pages/page1.html"); 

This creates a URL object for the following URL:
 http://example.com:80/pages/page1.html 

If you construct a URL object using one of these constructors, you can get a String containing the complete URL address by using the URL object&#39;s toString method or the equivalent toExternalForm method.
 $FG,5$$ID,2$URL addresses with Special characters$FG,0$$UL,0$$ID,-2$
 Some URL addresses contain special characters, for example the space character. Like this:
 http://example.com/hello world/ 

To make these characters legal they need to be encoded before passing them to the URL constructor.
 URL url = new URL("http://example.com/hello%20world"); 

Encoding the special character(s) in this example is easy as there is only one character that needs encoding, but for URL addresses that have several of these characters or if you are unsure when writing your code what URL addresses you will need to access, you can use the multi-argument constructors of the $MA,"java.net.URI",LM="KCTest(\"https://docs.oracle.com/javase/8/docs/api/java/net/URI.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ class to automatically take care of the encoding for you.
 URI uri = new URI("http", "example.com", "/hello world/", ""); 

And then convert the URI to a URL.
 URL url = uri.toURL(); 

$FG,5$$ID,2$MalformedURLException$FG,0$$UL,0$$ID,-2$
 Each of the four URL constructors throws a MalformedURLException if the arguments to the constructor refer to a null or unknown protocol. Typically, you want to catch and handle this exception by embedding your URL constructor statements in a try/catch pair, like this:
 try { URL myURL = new URL(...); } catch (MalformedURLException e) { // exception handler code here // ... } 

See $MA,"Exceptions",LM="KCTest(\"../../essential/exceptions/index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ for information about handling exceptions.
 
Note:&nbsp;
URLs are &quot;write-once&quot; objects. Once you&#39;ve created a URL object, you cannot change any of its attributes (protocol, host name, filename, or port number).
 


$MA,"&laquo; Previous",LM="KCTest(\"definition.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ &bull; $MA,"Trail",LM="KCTest(\"../TOC.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ &bull; $MA,"Next &raquo;",LM="KCTest(\"urlInfo.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ 


$MA,"About Oracle",LM="KCTest(\"http://www.oracle.com/corporate/index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ | $MA,"Contact Us",LM="KCTest(\"http://www.oracle.com/us/corporate/contact/index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ | $MA,"Legal Notices",LM="KCTest(\"http://www.oracle.com/us/legal/index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ | $MA,"Terms of Use",LM="KCTest(\"http://www.oracle.com/us/legal/terms/index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$ | $MA,"Your Privacy Rights",LM="KCTest(\"http://www.oracle.com/us/legal/privacy/index.html\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 $MA,"Copyright &copy; 1995, 2020 Oracle and/or its affiliates. All rights reserved.",LM="KCTest(\"http://www.oracle.com/pls/topic/lookup?ctx=cpyr&id=en-US\",\"https://docs.oracle.com:443/javase/tutorial/networking/urls/creatingUrls.html\");"$
 
Previous page: What Is a URL? 
Next page: Parsing a URL 
$FG$